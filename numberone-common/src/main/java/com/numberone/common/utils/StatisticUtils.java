package com.numberone.common.utils;import java.text.DecimalFormat;import java.util.*;/** * @Author Nxy * @Date 2020/2/10 12:52 * @Description 统计工具类，针对jdbc查询结果在应用层统计 */public class StatisticUtils {    /**     * @Author Nxy     * @Date 2020/2/10 12:53     * @Param     * @Return     * @Exception     * @Description 获得统计结果     */    public static List<Map<String, Object>> getStatistic(List<Map<String, Object>> source, List<String> keys, List<String> numKeys, int months) {        setMajorKey(source, keys);        return addAve(combineByMajorKey(source, numKeys), numKeys, months);    }    /**     * @Author Nxy     * @Date 2020/2/10 10:45     * @Param source:待处理数据  key:组成主键的各个数据的key     * @Return     * @Exception     * @Description 为待统计数据设置主键，方便后面按主键统计     */    private static List<Map<String, Object>> setMajorKey(List<Map<String, Object>> source, List<String> keys) {        Objects.requireNonNull(source);        Objects.requireNonNull(keys);        source.forEach(                (Map<String, Object> data) -> {                    StringBuilder key = new StringBuilder();                    Set keySet = data.keySet();                    for (String s : keys) {                        if (!keySet.contains(s)) {                            //主键缺失，本条辣鸡数据删除                            source.remove(data);                            return;                        }                        key.append(data.get(s));                    }                    data.put("majorKey", key.toString());                    key = null;                }        );        return source;    }    /**     * @Author Nxy     * @Date 2020/2/10 10:48     * @Param source:待处理数据  numsKey:需要合并的数据的key     * @Return     * @Exception     * @Description 按主键合并统计项得到结果     */    private static List<Map<String, Object>> combineByMajorKey(List<Map<String, Object>> source, List<String> numKeys) {        Objects.requireNonNull(source);        Map<String, Map<String, Object>> result = new HashMap<String, Map<String, Object>>();        Set resultSet = result.keySet();        source.forEach(                (data) -> {                    String majorKey = data.get("majorKey").toString();                    if (resultSet.contains(majorKey)) {                        Map m = result.get(majorKey);                        for (String s : numKeys) {                            float before = 0;                            float next = 0;                            if (m.keySet().contains(s)) {                                before = Float.valueOf(m.get(s).toString());                                m.remove(s);                            }                            if (data.keySet().contains(s)) {                                next = Float.valueOf(data.get(s).toString());                            }                            m.put(s, before + next);                        }                    } else {                        result.put(majorKey, data);                    }                }        );        int resultSize = resultSet.size();        List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>(resultSize);        for (Object o : resultSet) {            resultList.add(result.get(o));        }        return resultList;    }    /**     * @Author Nxy     * @Date 2020/2/10 15:15     * @Param     * @Return     * @Exception     * @Description 增加各统计项月平均值     */    private static List<Map<String, Object>> addAve(List<Map<String, Object>> source, List<String> numKeys, int months) {        if (months <= 0) {            return source;        }        DecimalFormat df = new DecimalFormat("##0.00");        source.forEach(                (data) -> {                    int length = numKeys.size();                    for (int i = 0; i < length; i++) {                        String key = numKeys.get(i);                        float total = Float.valueOf(data.get(key).toString());                        data.put("ave" + key, df.format(total / months));                    }                }        );        return source;    }}